import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os

def read_black_scholes_data():
    """Read Black-Scholes data generated by C++ program"""
    parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    filepath = os.path.join(parent_dir, "black_scholes_data.txt")
    
    # Read CSV data
    df = pd.read_csv(filepath)
    return df

def plot_black_scholes_profit_loss(df):
    """Plot Black-Scholes profit/loss curves for different time to expiry"""
    
    # Parameters
    K = df['K'].iloc[0]  # Strike price from data
    
    # Time to expiry values
    T_values = [0.2, 0.4, 0.6, 0.8, 1.0]
    colors = ['red', 'orange', 'yellow', 'green', 'blue']
    
    plt.figure(figsize=(10, 6))
    
    # Plot Call Option Profit/Loss
    plt.subplot(1, 1, 1)
    
    # Add theoretical payoff at expiration (T=0)
    S_range = df[df['T'] == 0.2]['S'].values  # Use same stock price range
    call_payoff = np.maximum(S_range - K, 0)  # max(S-K, 0)
    # Use the option premium as the cost basis for profit/loss calculation
    option_premium = df[(df['T'] == 0.2) & (df['S'] == K)]['call_price'].iloc[0]
    call_payoff_pl = call_payoff - option_premium
    plt.plot(S_range, call_payoff_pl, color='black', linewidth=3, linestyle='--', 
            label='Theoretical Payoff (T=0)', alpha=0.8)
    
    for i, T in enumerate(T_values):
        # Filter data for this time to expiry
        T_data = df[df['T'] == T]
        
        # Calculate profit/loss: current price - price at strike
        strike_call_price = T_data[T_data['S'] == K]['call_price'].iloc[0]
        call_profit_loss = T_data['call_price'] - strike_call_price
        
        plt.plot(T_data['S'], call_profit_loss, color=colors[i], linewidth=2, 
                label=f'T = {T} years')
    
    plt.axhline(y=0, color='black', linestyle='--', alpha=0.7, label='Break-even')
    plt.axvline(x=K, color='black', linestyle=':', alpha=0.7, label=f'Strike Price: {K}')
    plt.title('Call Option Profit/Loss vs Stock Price\n(At Different Time to Expiry)')
    plt.xlabel('Stock Price')
    plt.ylabel('Profit/Loss')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # # Plot Put Option Profit/Loss
    # plt.subplot(1, 2, 2)
    
    # # Add theoretical payoff at expiration (T=0)
    # put_payoff = np.maximum(K - S_range, 0)  # max(K-S, 0)
    # # Use the option premium as the cost basis for profit/loss calculation
    # option_premium = df[(df['T'] == 0.2) & (df['S'] == K)]['put_price'].iloc[0]
    # put_payoff_pl = put_payoff - option_premium
    # plt.plot(S_range, put_payoff_pl, color='black', linewidth=3, linestyle='--', 
    #         label='Theoretical Payoff (T=0)', alpha=0.8)
    
    # for i, T in enumerate(T_values):
    #     # Filter data for this time to expiry
    #     T_data = df[df['T'] == T]
        
    #     # Calculate profit/loss: current price - price at strike
    #     strike_put_price = T_data[T_data['S'] == K]['put_price'].iloc[0]
    #     put_profit_loss = T_data['put_price'] - strike_put_price
        
    #     plt.plot(T_data['S'], put_profit_loss, color=colors[i], linewidth=2, 
    #             label=f'T = {T} years')
    
    # plt.axhline(y=0, color='black', linestyle='--', alpha=0.7, label='Break-even')
    # plt.axvline(x=K, color='black', linestyle=':', alpha=0.7, label=f'Strike Price: {K}')
    # plt.title('Put Option Profit/Loss vs Stock Price\n(At Different Time to Expiry)')
    # plt.xlabel('Stock Price')
    # plt.ylabel('Profit/Loss')
    # plt.legend()
    # plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()

def plot_option_prices(df):
    """Plot option prices vs stock price for different time to expiry"""
    
    # Parameters
    K = df['K'].iloc[0]  # Strike price from data
    
    # Time to expiry values
    T_values = [0.2, 0.4, 0.6, 0.8, 1.0]
    colors = ['red', 'orange', 'yellow', 'green', 'blue']
    
    plt.figure(figsize=(10, 6))
    
    # Plot Call Option Prices
    plt.subplot(1, 1, 1)
    
    # Add theoretical payoff at expiration (T=0)
    S_range = df[df['T'] == 0.2]['S'].values  # Use same stock price range
    call_payoff = np.maximum(S_range - K, 0)  # max(S-K, 0)
    plt.plot(S_range, call_payoff-10, color='black', linewidth=3, linestyle='--', 
            label='Theoretical Payoff (T=0)', alpha=0.8)
    
    for i, T in enumerate(T_values):
        T_data = df[df['T'] == T]
        plt.plot(T_data['S'], T_data['call_price']-10, color=colors[i], linewidth=2, 
                label=f'T = {T} years')
    
    plt.axvline(x=K, color='black', linestyle=':', alpha=0.7, label=f'Strike Price: {K}')
    plt.title('Call Option Prices vs Stock Price')
    plt.xlabel('Stock Price')
    plt.ylabel('Option Price')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # # Plot Put Option Prices
    # plt.subplot(1, 2, 2)
    
    # # Add theoretical payoff at expiration (T=0)
    # put_payoff = np.maximum(K - S_range, 0)  # max(K-S, 0)
    # plt.plot(S_range, put_payoff, color='black', linewidth=3, linestyle='--', 
    #         label='Theoretical Payoff (T=0)', alpha=0.8)
    
    # for i, T in enumerate(T_values):
    #     T_data = df[df['T'] == T]
    #     plt.plot(T_data['S'], T_data['put_price'], color=colors[i], linewidth=2, 
    #             label=f'T = {T} years')
    
    # plt.axvline(x=K, color='black', linestyle=':', alpha=0.7, label=f'Strike Price: {K}')
    # plt.title('Put Option Prices vs Stock Price')
    # plt.xlabel('Stock Price')
    # plt.ylabel('Option Price')
    # plt.legend()
    # plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()

def main():
    try:
        # Read the Black-Scholes data
        df = read_black_scholes_data()
        print(f"Loaded Black-Scholes data with {len(df)} data points")
        print(f"Parameters: K={df['K'].iloc[0]}, r={df['r'].iloc[0]}, sigma={df['sigma'].iloc[0]}")
        
        # Plot profit/loss curves
        print("Plotting profit/loss curves...")
        # plot_black_scholes_profit_loss(df)
        
        # Plot option prices
        print("Plotting option prices...")
        plot_option_prices(df)
        
    except FileNotFoundError:
        print("Error: black_scholes_data.txt not found!")
        print("Make sure to run the C++ program first to generate the data.")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main() 